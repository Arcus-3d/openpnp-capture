package org.openpnp.capture;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : /Users/jason/Projects/openpnp/openpnp-capture/include/openpnp-capture.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class capture_device extends Structure {
	/** C type : const char* */
	public Pointer name;
	/** C type : const char* */
	public Pointer unique_id;
	/** C type : const char* */
	public Pointer manufacturer;
	/** C type : const char* */
	public Pointer model;
	/** C type : void* */
	public Pointer _internal;
	public capture_device() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("name", "unique_id", "manufacturer", "model", "_internal");
	}
	/**
	 * @param name C type : const char*<br>
	 * @param unique_id C type : const char*<br>
	 * @param manufacturer C type : const char*<br>
	 * @param model C type : const char*<br>
	 * @param _internal C type : void*
	 */
	public capture_device(Pointer name, Pointer unique_id, Pointer manufacturer, Pointer model, Pointer _internal) {
		super();
		this.name = name;
		this.unique_id = unique_id;
		this.manufacturer = manufacturer;
		this.model = model;
		this._internal = _internal;
	}
	public capture_device(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends capture_device implements Structure.ByReference {
		
	};
	public static class ByValue extends capture_device implements Structure.ByValue {
	};
}
